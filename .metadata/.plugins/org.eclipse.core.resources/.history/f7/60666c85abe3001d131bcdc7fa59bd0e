package com.abbymcculloch.lighthouse.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;

import com.abbymcculloch.lighthouse.models.LoginUser;
import com.abbymcculloch.lighthouse.models.Message;
import com.abbymcculloch.lighthouse.models.User;
import com.abbymcculloch.lighthouse.services.MessageService;
import com.abbymcculloch.lighthouse.services.UserService;

import jakarta.servlet.http.HttpSession;
import jakarta.validation.Valid;

public class HomeController {
    @Autowired
    private UserService userService;
    
    @Autowired
    private MessageService messageService;
    

//  RENDER LOGIN FORM------------
 @GetMapping("/")
 public String renderLogregForm(Model model) {
 
     // Bind empty User and LoginUser objects to the JSP
     // to capture the form input
     System.out.println("ji");

     model.addAttribute("newUser", new User());
     model.addAttribute("newLogin", new LoginUser());
     return "logreg.jsp";
 }
 
 @PostMapping("/register")
 public String processRegister(@Valid @ModelAttribute("newUser") User newUser, 
         BindingResult result, Model model, HttpSession session) {
     
 	User registeredUser = userService.register(newUser, result);
     // to do some extra validations and create a new user!
     
     if(result.hasErrors()) {
         // Be sure to send in the empty LoginUser before 
         // re-rendering the page.
         model.addAttribute("newLogin", new LoginUser());
         return "logreg.jsp";
     }
     
     // No errors! 
     // TO-DO Later: Store their ID from the DB in session, 
     // in other words, log them in.
     else {        
     session.setAttribute("userId", registeredUser.getId());
     session.setAttribute("userName", registeredUser.getUserName());
     return "redirect:/books";
     }
 }
 
 @PostMapping("/login")
 public String processLogin(@Valid @ModelAttribute("newLogin") LoginUser newLogin, 
         BindingResult result, Model model, HttpSession session) {
     
     User loginUser = userService.login(newLogin, result);
     if(result.hasErrors()) {
         model.addAttribute("newUser", new User());
         return "logreg.jsp";
     }
     // No errors! 
     // TO-DO Later: Store their ID from the DB in session, 
     // in other words, log them in.
     else {
         session.setAttribute("userId", loginUser.getId());
         session.setAttribute("userName", loginUser.getUserName());
         return "redirect:/books";
     }
 }
 
 @GetMapping("/logout")
 public String logoutLogic(HttpSession session) {
 	session.invalidate();
 	return "redirect:/";
 }

// POST LOGIN
 
 
//READ ALL MESSAGES
 
@GetMapping("/dashboard")
public String dashboard(HttpSession session, Model model) {
//	put this check in all gets
	if(session.getAttribute("userId") == null) {
		return "redirect:/";
	}
	List<Message> messageList = messageService.allMessages();
	model.addAttribute("messageList", messageList);
	return "dashboard.jsp";
}

//READ ONE MESSAGE


@GetMapping("/messages/{id}")
public String messageDetails(@PathVariable("id")Long id, Model model, HttpSession session) {
	if(session.getAttribute("userId") == null) {
		return "redirect:/";
	}
	Message oneMessage = messageService.findMessage(id);
	model.addAttribute("oneMessage", oneMessage);
	return "messageDetail.jsp";
}
 
 
 
}
